* Javascript, Week 3
examples: http://codepen.io/collection/noEJaj

cheatsheet: http://cheat-sheets.org/saved-copy/jsquick.pdf

** Arrays
Arrays are a type of data that can store many different values. They are "containers" or "elements". We say element, because it is a general term that can apply to any kind of data.

#+BEGIN_SRC javascript
// empty array - no values inside
var empty = []

// numeric grades
var grades = [80, 93, 71, 97, 85, 62];

// string foods
var foods = ['apple', 'pizza', 'steak'];

// HMTL elements that have the class 'imgs'
var images = document.getElementsByClassName('imgs');

// all list items on page
var items = document.getElementsByTagName('li');
#+END_SRC

We can access any element using a thing called an index. An index is a number that lets us pick out a particular element. In JS, the indices start from 0. Basically, if we want the 7th element in an array, we would ask for the index =[6]=. The following example, using an array of letters, should hopefully demonstrate this idea.

#+BEGIN_SRC javascript
// an example array
var alphabet = ['a', 'b', 'c', 'd', 'e', 'f', 'g'];

// access elements using their index
alphabet[0] === 'a'; // first value in the array
alphabet[1] === 'b'; // second value in the array
// ...
alphabet[6] === 'g'; // seventh value in the array
#+END_SRC

An interesting thing about arrays is that they can hold values of any type. This can get a little fancy, although it doesn't happen often in practice. The following example will make an array containing a string, a number, and an array (yes, that is an array (of HTML elements) inside of an array).

#+BEGIN_SRC javascript
// an array with multiple types inside it
var my_array = ['hello', 15, document.getElementsByTagName('p')];
#+END_SRC

Arrays have some functions and methods that provide some built in functionality.

#+BEGIN_SRC javascript
// just an example array
var arr = [];

arr.length; // number of elements in this array

arr.sort(); // sort the elements in the array. Can be confusing if there are multiple types

arr.push(1); // add an element to the end of the array
arr[arr.length] = 3; // add an element to the end of the array
arr[1] = 2; // insert an element at an arbitrary index
#+END_SRC

** Loops and Iteration
With arrays, we can store multiple values really easily. However, using index notation to get at every value is a major pain. To make things easier, we can use loops to go over an array one element at a time, avoiding the need to manually access elements.

Below is a loop that logs each element to the console.

#+BEGIN_SRC javascript
var some_numbers = [1,2,3,4,5,6,7,8,9,10];

for (j = 0; j < some_numbers.length; j++) {
    // this code will be applied to every element in our array
    console.log(some_numbers[j]);
}
#+END_SRC

There are a few things to mention here. Let me go over them one by one:

- =for () {}=

  This is the basic syntax of a =for= loop. We need to put stuff in the parenthesis, and we need to put stuff in the curly braces, but know that every time you see this sort of syntax, you are looking at a =for= loop.

- =(j = 0; j < some_numbers.length; j++)=

  This section defines the "bounds" of the loop. This section can be confusing until you get familiar with how it all works. Note that there are 3 parts, and they are separated by semicolons (=;=). Let's look at each part:

  - =j = 0;=

    We declare an *iteration variable* that will keep track of how far into the loop we are. When looping over an array, we usually use =j= (or =i=) to keep track of the index we are currently looking at.

    This variable will only exist inside the loop. Once the loop ends, it's gone forever. You'll commonly see the same iteration variable in many loops within the same file, and it's usually a single letter variable.

  - =j < some_numbers.length;=

    This is a conditional (we are about to talk more about these). If this conditional ever evaluates to =false=, then the loop will stop running. That is to say, the loop will only run when this conditional is true.

    In our example, we want =j= to be less than the length of the array, so that we don't try to access elements that don't exist (which causes errors).

  - =j++=

    The third part states how our loop state is going to change after each iteration. I said earlier that we would use =j= to keep track of which index we are looking at. This section of the loop details how we move from one index to the next. The =++= means that we will increase the value of =j= by 1, that is, we move to the next index.

  On the whole, the loop conditions on this line are extremely common. It basically says that we are going to look at each index of the array exactly one time. You will almost always use this when looping over an array.

- ={ /* code */ }=

  The code in between the curly braces is called the *loop body*, and it will run exactly one time for each iteration of the loop. In the example loop, we will look at each index one time, and run the code =console.log(some_numbers[j]);= for each index.

  The kind of code that goes into the loop body is normal JS. Generally, it will use the index (=j=) to access one element of the array, and then do some work with the element.

To summarize, this is how a =for= loop works:

1. JavaScript sees that you have a =for () {}= loop
2. It creates the iteration variable
3. It runs the condition. If true, go to 4. If false, go to 6.
4. Run the loop body
5. Update the iteration variable, and go to 3.
6. Once the condition is false, the iteration variable is forgotten, and the loop ends.

Example: find the average of an array of numbers

#+BEGIN_SRC javascript
// average = sum / count

// example array
var nums = [1,2,3,4,5,6];

// store some values outside of the loop (otherwise, they will get lost when the loop ends
// this variable will hold the sum of the numbers
total = 0;

for (i = 0; i < nums.length; i++) {
    // update our total with each number
    total += nums[i];
}

console.log(total / nums.length);
#+END_SRC

** Conditionals
Conditionals are a way for programmers to make choices in programs. Sometimes, you want to do one thing, and at other times, you want to do something else. Let me illustrate with an example in JS.

#+BEGIN_SRC javascript
age = 20;

if (age >= 21) {
    console.log("This person can buy alcohol.");
}
else {
    console.log("This person is too young for alcohol.");
}
#+END_SRC

Let me write the general form of this, and discuss what's going on.

#+BEGIN_SRC javascript
if (condition) {
    // do this block if condition is true
}
else {
    // do this block if condition is false
}
#+END_SRC

=condition= is some expression that evaluates to a Boolean value (=true= or =false=). Essentially, you can consider these as questions that results in yes or no.

The syntax is pretty straightforward, and looks a bit like the =for= loop syntax. As with loops, the ={}= denote the block associated with the conditional.

Here's an example of how we can use conditionals to interact with users:

#+BEGIN_SRC javascript
/* say hello, but only if user enters their name */
var name = prompt("What is your name?");

if (name.length != 0) {
    document.write("Hello " + name);
}
else {
    document.write("No name, no game...");
}
#+END_SRC

Conditionals can get rather complicated. Sometimes, we need to check multiple conditions before taking action. Let me revisit the alcohol example: it's not enough to be of age, you also need your ID with you. Let's update the conditional to also include a (simplified) check for the ID.

#+BEGIN_SRC javascritp
age = 20;
has_id = true;

if (age >= 21) {
    if (has_id == true) {
        console.log("This person can buy alcohol.");
    }
    console.log("This person has no ID, so no alcohol.");
}
else {
    console.log("This person is too young for alcohol.");
}
#+END_SRC

What we are doing here is called nesting our conditionals. By placing conditionals inside of each other, we can further restrict when we do things.

There is another style of conditional that involves combining conditions together. Let me make a toy example where any number between 20 and 30 is "great!" but any other number is "lame...".

#+BEGIN_SRC javascript

number = 25;

if (number >= 20 && number <= 30) {
    console.log("great!");
}
else {
    console.log("lame!");
}
#+END_SRC

By using the =AND= operator, =&&=, we can combine two conditions. There is also the =OR= operator =||= and the =NOT=, or =NEGATE=, operator =!=. We can do some examples in class, and these are also easy to google for.

