* CSS Week 3
** Pseudo Classes and Pseudo Elements
Elements that are dynamic or dependent on the DOM structure. For example, we saw that links had different states, like =hover=

#+BEGIN_SRC css
a:hover {}
#+END_SRC

Here are the types of Pseudo Classes:

| Link       | User Action | Forms       |
|------------+-------------+-------------|
| =:link=    | =:hover=    | =:enabled=  |
| =:visited= | =:active=   | =:checked=  |
|            | =:focus=    | =:disabled= |

There are also structural and positional pseudo classes:

- =:first-child=
- =:last-child=
- =:nth-child(x)= (where =x= is an integer)
- =:only-child=
- =:first-of-type=
- =:last-of-type=
- =:only-of-type=
- and many more

Example:

#+BEGIN_SRC css
/* Last paragraph on page is small-caps and monospace */
p:last-of-type {
    font-variant: small-caps;
    font-family: monospace;
}
#+END_SRC

Pseudo Elements are similar, in that they are used to style specific parts of the page.

| Textual         | Positional | Fragments     |
|-----------------+------------+---------------|
| =:first-letter= | =:before=  | =::selection= |
| =:last-letter=  | =:after=   |               |

#+BEGIN_SRC css
/* Start each paragraph with a large capital letter */
p:first-letter {
    font-size: 125%;
    font-variant: small-caps;
}
#+END_SRC

These are just some examples. There are tons of things you can do with these, but explaining them all would be a 15 hours lecture. As always, you can find tons of information about these (and examples of using them) over at the [[https://developer.mozilla.org][Mozilla Developer Network]].

** Transitions
codepen example: https://codepen.io/ColleenEMc/pen/zvPpRL

A CSS Transition is a way to animate an element's change in state. An element's state is usually either =:default=, =:focus=, or =:active= , and hovering/clicking on an element will change the state.

- =transition-property= - what are you changing? (size color, position, etc.)
- =transition-duration= - how long should the transition last? (short!)
- =transition-timing-function= - smooth or acceleration? will show examples
- =transition-delay= - when should the transition start?

Steps to using transitions:

1. define your elements (HTML)
2. Pick which elements will transition
3. Using pseudo classes, define the transitions

#+BEGIN_SRC html
<p>Let's play with this paragraph.</p>
#+END_SRC

#+BEGIN_SRC css
p {
    font-size: 16px;
    background: #FF0000; /* red */

    /* Specify what will transition */
    transition-property: background, font-size;
    /* specify duration of transition (in seconds) */
    transition-duration: .5s;
    /* smooth transition */
    transition-timing-function: linear;
    /* Any delay? */
    transition-delay: 0s;
}

p:hover {
    font-size: 24px;
    background: #0000FF; /* blue */
}
#+END_SRC

You can see that we define =p= and =p:hover= with normal css, making sure to include the four =transition-= properties in the =p= style. Once we load this up, hovering over an =p= element will start our transition.

If we do not have a transition, that switch between default and hovered would be instantaneous.

** Transforms
codepen example: https://codepen.io/ColleenEMc/pen/YyEYem

MDN examples: https://developer.mozilla.org/en-US/docs/Web/CSS/transform

Similar to transitions, transforms let you change the appearance of elements. We'll be talking about five different kinds of transforms:

- translate (move)
- rotate
- scale (change size)
- skew (slant)
- matrix

Translate takes 2 values - an X value and a Y value. These values determine how you want your element to reposition.

- (+x, +y) - move to the upper right
- (-x, +y) - move to the upper left
- (+x, -y) - move to the lower right
- (-x, -y) - move to the lower left

#+BEGIN_SRC css
.animate:hover {
    transform: translate(50, -100);
}
#+END_SRC

Rotate will rotate your element by some number of degrees. When you specify how many degrees, it is important that you use the =deg= (degree) unit. That is, write something like =180deg=

#+BEGIN_SRC css
.animate:hover {
    transform: rotate(180deg);
}
#+END_SRC

Scale will change the size of your element. It takes 2 values: an X factor and a Y factor. The X factor will be multiplied by the element's width (in pixels) to determine the new width. The Y factor will be multiplied by the element's height to determine the new height.

#+BEGIN_SRC css
.animate:hover {
    transform: scale(2, 1.5);
}
#+END_SRC

Skew will slant your element. It is very weird to use, and will require that you play around with it. Essentially, HTML elements are 2-dimensional. If we pretend that they are 3-dimensional, then we can reorient them. This reorientation will make them looked angled, or skewed. In CSS, we define an x-angle and a y-angle that will reorient the element.

#+BEGIN_SRC css
.animate:hover {
    transform: skew(30deg, 15deg);
}
#+END_SRC

Matrix will let you perform all of the above transforms at the same time. However, it is very confusing to learn unless you have a good background in Linear Algebra.

If you do have this background, then you will have worked (by hand) with things like rotations matrices and skew matrices, and will know that you can multiply them together in order to make a single matrix that will perform both rotation and skew.

If you do not have this background, then =transform: matrix()= is not worth using. Even if you have the background, most people do not, and so most people will not be able to read your CSS code.

It is recommended that you not use this is real websites.

** Positioning
We put elements at specific places using the =position= property. The four values are very different form each other. These can be further modified by top, bottom, left, and right.

#+BEGIN_SRC css
div {
    position: static;
    position: relative;
    position: absolute;
    position: fixed;
    top: 0px;    /* offsets */
    bottom: 0px;
    left: 0px;
    right: 0px;
}
#+END_SRC

=static=

- default value
- uses next available space on the page
- ignores top, bottom, left, right

=relative=

- Position an element relative to where it would be, if it was using static.
- Lets you use the offsets (top, etc.) to move one way or another
- does not affect any other element
- usually, relative elements are containers (blocks) for other elements.

=absolute=

- ignores document flow, and positions relative to its parent element
- Other elements position themselves as if the =absolute= element does not exist

=fixed=

- position is relative to the window. This how those annoying popups stay in the middle of your screen.
- position will not change
- Rather than popups, smart devs use this for navbars at the top.

*** Positioning Tips
- Figure out what kind of layout you want before you start coding. Take a moment to draw your layout on a piece of paper, and jot down what sort of content should appear in which area of the page. This will save you a lot of stress, as it gives you a tangible example of what your site should look like.

- Positioning is going to be key to your layout. Again: know where you want your elements to be, relative to each other, before you start coding.

- Browsers have default margins (and sometimes padding). You may need to manually set the =margin= to =0px= in order to get the look you expect.

#+BEGIN_SRC css
body {
    margin: 0px;
    padding: 0px;
}
#+END_SRC

- When using =absolute=, your elements may stack on top of each other. If you don't like the way they are stacked, you can the =z-index= to determine the order in which they are stacked.
