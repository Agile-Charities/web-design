* Web Desing, Course 1 (HTML), Week 2
** Document Object Model (DOM)
We call the structure of a web page the DOM. It's a tree-like
structure, which basically means that the =<html>= tag is at the top, and all other tags are inside of it (the video gives a nice graphic, at 1:03).

Here's some HTML code that you can refer to while we discuss the different parts of the DOM. By typing this into a file on your computer and opening it in your browser, you'll be able to see how each part of the code contributes to the web page.

#+BEGIN_SRC html
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8">
    <title>My Web Page</title>
  </head>
  <body>
    <p>content goes here</p>
  </body>
</html>
#+END_SRC

*** =<!DOCTYPE html>=
There used to be a lot of =DOCTYPE= s, but HTML5 simplified it all down to one. =DOCTYPE= declaration say what kind of document this is. Nowadays, it's just HTML5, but there used to be stuff like =XHTML= and =DHTML=, and they all had their own versions.

We'll always use =<!DOCTYPE html>=, so don't worry about the other ones.

After we declare that we're writing an HTML file, we open up an =<html>= tag. We don't close this tag until the very end of the file, as it includes all to the other tags as child elements. More on that when we talk about the =<body>= section.

*** =<head>=
The =<head>= tag contains metadata for the browser. Humans aren't going to read this, but there are a lot of tools (like Google Search) that read metadata to try to figure out what sort of content is on the page.

Examples of metadata that we put in the =<head>= tag are the language our page is in and the title of our page (the title is what you see when you look at the page's browser tab).

=<meta>= tags are unusual, in that you don't need to close them. See the example html code for an example =<meta>= tag.

This is also where you include stylesheets (CSS) and JavaScript that your page relies on. We'll talk more about CSS and JS in courses 2 and 3, respectively.

#+BEGIN_SRC html
<head>
  <meta charset="UTF-8">
  <title>My Web Page</title>
</head>
#+END_SRC

*** =<body>=
The majority of web site content lives inside the =<body>= tag. It's very important to maintain the tree-like structure of the DOM in here, or else your web page will render wrongly.

The tree-like structure means that each element is a "child" element of a "parent" element. A parent element can have any number of child elements, and child elements can also be the parent of other child elements.

The example below shows some body content. Ignore the =&lt;= and =&gt;=, we'll talk about them later.

#+BEGIN_SRC html
<body>
  <h3>This is some content</h3>
  <ul>
    <li>This is a list item</li>
    <li>The &lt;ul&gt; tag means "make an Unordered List"</li>
    <li>And we add list elements with the &lt;li&gt; tag</li>
    <li>As an example of a well formed DOM, note where we end the &lt;ul&gt; and &lt;li&gt; tags. See how the &lt;ul&gt; elements contains all of &lt;li&gt; elements?</ul>
    <li>The &lt;ul&gt; is the parent elements of the &lt;li&gt; elements, so all the &lt;li&gt; elements are inside the &lt;ul&gt; element</li>
    <li>I'll render this code just below here, so you can see it in action.</li>
  </ul>
</body>
#+END_SRC

(begin rendered HTML)

#+BEGIN_HTML
<body>
  <h3>This is some content</h3>
  <ul>
    <li>This is a list item</li>
    <li>The &lt;ul&gt; tag means "make an Unordered List"</li>
    <li>And we add list elements with the &lt;li&gt; tag</li>
    <li>As an example of a well formed DOM, note where we end the &lt;ul&gt; and &lt;li&gt; tags. See how the &lt;ul&gt; elements contains all of &lt;li&gt; elements?</ul>
    <li>The &lt;ul&gt; is the parent elements of the &lt;li&gt; elements, so all the &lt;li&gt; elements are inside the &lt;ul&gt; element</li>
    <li>I'll render this code just below here, so you can see it in action.</li>
  </ul>
<br />
</body>
#+END_HTML

(end of rendered HTML)

*** Review of DOM
Use beginning and end tags

Close inner (child) tags before outer (parent) tags

When using attributes, make sure you are using valid attributes.

Browsers will try to fix bad code, but they don't always do it well. Sometimes the browser trying to fix your code can screw up the whole layout and structure of your site, so be careful about relying on your browser to fix things.


** HTML Tags
Where we finally start making interesting pages.

There are loads of tags, so we will only cover the most used tags and talk about places where you can find all of the available tags.

*** Syntax (boring, but necessary)
(Almost) every tag has a beginning and end. Some tags self-close.

#+BEGIN_SRC html
<h1>Hello World!</h1>

<img src="picture.jpg" />

<a href="https://en.wikipedia.com">Link to Wikipedia</a>
#+END_SRC

The =<h1>= tag uses the normal open/close style, but the =<img>= uses the self-closing style. We can also see that some tags have attributes. =<img>= needs to know what picture it should be, so it needs the =src= attribute. We've also seen the =<a>= tag, which uses the open/close style, and needs the =href= tag to tell it what website to link to.

It's important that every self-closing tag ends with =/>= . That slash is important, because browsers can mess up with closing that tag and then half your page will disappear.

Certain tags display in different ways. Some tags are =display: block= , which means that they start on a new line, after anything that came before them. The other kind is =display: inline=, which mean they follow content without needed a new line. Things like headers and paragraphs (=<h1>= , =<p>=) are =display: block=, whereas things like links =<a>= are =display: inline= . We'll learn more about display in Course 2, when we talk about CSS.

*** Common Tags
Header tags: =<h1>= , =<h2>= , ..., =<h6>=

Paragraphs: =<p>=

Divs: =<div>=

Lists: =<ol>= , =<ul>= , =<li>=

Line breaks: =<br />=

Images: =<img>=

Links: =<a>=

When tags need attributes, we always (ALWAYS) put them in the opening tag. Attributes always come in name/value pairs. In the following image tag, note the two attributes and their value.

#+BEGIN_SRC html
<img src="myPicture.jpg" title="Image of a dog" alt="dog" />
#+END_SRC

The =src= attribute says what picture to display. Frequently, when making web sites, =<img>= tags will display a "broken link" picture, which means that they cannot find the file your told them to display. This is normal, and just means you need to make sure you are pointing the =src= to the right spot.

The =title= attribute adds a hidden caption to an image. If you hover your mouse over an image with an =title= attribute, floating text will appear. In this case, the text will be "Image of a dog".

=<alt>= text is for screenreaders and broken links. This text will be read aloud by a screenreader, and makes your site accessible to people who are visually impaired.


*** Common Attributes

=class= applies extra formatting. We'll cover this more later.

=id= assigns an ID to the element. You want your =id= s to be unique. This is very useful when using JavaScript, which we'll come to later. 

=class= assigns a CSS class to the element. Again, we'll cover this in depth when we talk about CSS.

=style= lets you write CSS inline with the element, but it's not something we want to use. It only still exists for legacy reasons (backwards compatibility with old web sites), and using it is strongly discouraged. Modern practice is to only use CSS in CSS files.

=accesskey= is primarily for accessibility, and asigns a shortkey key to activate the element. Useful for buttons and links.

=tabindex= describes the order of elements to focus when using the =TAB= key to move around the site. This is important for accessibility. Lower numbers come first in the order. =1=, then =2=, then =3=, and so on.


*** Special Entities
We use characters like =<= to open tags, so how do we include them in text we want to display?

| If you want    | Then use the text |
|----------------+-------------------|
| =<=            | =&lt;=            |
| =>=            | =&gt;=            |
| Copyright sign | =&copy;=          |
| blank space    | =&nbsp;=          |
| cents sign     | =&cent;=          |
| =&=            | =amp;=            |

Generally speaking, you'll want to Google these when you need them (There are loads more that we won't be going over in class). Remembering them all is tedious, but you'll probably end up remembering =&nbsp;= (non-breaking space) as it can come up fairly often.


*** Review of Tags
Know the difference between tags and attributes

Be aware of the differences between open and closing tags, and self closing tags


** Semantic Tags
There are a number of common design elements in a web site, and we're going to be discussing some of them.

*** =<header>=
Frequently used for introductory elements and website navigation.

#+BEGIN_SRC html
<header>
  <h1>This is the Title</h1>
  <h2>The author is me</h2>
</header>
#+END_SRC

The =<header>= tag is a block tag and is primarily used to contain top-of-the-page elements. The elements it contains are its contents, so there isn't any special formatting. The =<header>= tag is =display: block=, so it will make space for itself. However, as you should only use it at the very top of your page (first elements inside of =<body>=), there won't be anything that needs to get pushed out of the way.

The =<header>= and =<head>= tags are different, and getting confused by them is common. It can be useful to keep a =template.html= file lying around, with the following contents inside. This way, you won't need to figure out which is which every time you make a web page.

There will be a better =template.html= at the bottom of this page (and in the =week-2-docs= folder), but this will give you the right idea.

#+BEGIN_SRC html
<!DOCTYPE html>
<html>
  <head>
    <meta charset="UTF-8">
    <title>My Page Title</title>
  </head>
  <body>
    <header>
    </header>
  </body>
</html>
#+END_SRC

*** =<nav>=
=<nav>= is used for holing navigational links. These links are for navigating around your page, or linking to other pages on the same site. You want to avoid putting links to other sites in your =<nav>=, although there are some exceptions where it's okay.

The =<nav>= tag is almost always found inside the =<header>= tag, so our example will put it in there.

#+BEGIN_SRC html
<header>
  <nav>
    <ul>
      <li><a href="#section1">Section 1</a></li>
      <li><a href="#section2">Section 2</a></li>
    </ul>
  </nav>
</header>
#+END_SRC

*** =<main>=
=<main>= is where the majority of content lives. This is where all the fun stuff usually happens. We';; talk a lot of the stuff in this section as the course goes on, so for now I'll just provide a quick template.

#+BEGIN_SRC html
<body>
  <main>
    <p>this is where most stuff will go.</p>
  </main
</body>
#+END_SRC

*** =<footer>=
The counterpart to the =<header>= tag, the =<footer>= tag is found at the very bottom of the page.

#+BEGIN_SRC html
<footer>
  <p>&copy; 2017 Agile Charities</p>
</footer>
#+END_SRC

Footer are not required, but a lot of sites choose to have them.

It is important to note that the =<footer>= tag does not put things on the bottom of the display. It put things at the end of the content. If your content does not cover the whole screen, then the =<footer>= content will not be at the bottom.

*** =<figure>=
Like =<img>=, but much more meaningful. the =<figure>= tag allows you to use captions and have multiple media resources.

#+BEGIN_SRC html
<figure>
  <img src="some_pic.jpg"> alt="a picture" />
  <figcaption>Here we see a picture, rendered by the browser.</figcaption>
</figure>
#+END_SRC

*** Other important tags
There are far too many to cover here, so it's good to be aware of what sort of tags exist, and where to look them up.

- Structural elements

- form elements

- input elements

- graphics elements

- media elements

When you need to lookup tags, the best place to go is to the [[https://developer.mozilla.org/en-US/docs/Web/HTML][Mozilla Developer Network]]. Mozilla makes their living off of building amazing web tech (like the Firefox web browser), and are a fantastic resource for all things web related. They provide excellent references for HTML, CSS, and JavaScript.

*** Review
Semantic tags help you organize your website code, which makes for a cleaner user experience.

(the professor claims that =<div>= is going out of style, but I've seen no evidence of that in modern web development libraries and frameworks)

** Template Page
(Important: This video should be followed by each student on their own time, to reinforce the ideas presented during the lectures)

Here is a completed template page, without an real content.

The HTML validator used in the video is [[https://validator.w3.org][validator.w3.org]]

#+BEGIN_SRC html
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8">
    <title>My Webpage</title>
  </head>

  <body>
    <header>
      <h1>My Webpage</h1>
      <nav>
        <ul>
          <li><a href="#some-section">Navigational Link</a></li>
        </ul>
      </nav>
    </header>

    <main>
      <p>This is where the content goes</p>
    </main>

    <footer>
      <p>&copy; 2017 Agile charities</p>
    </footer>
  </body>
</html>
#+END_SRC

** Images

